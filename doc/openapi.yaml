openapi: 3.0.3
info:
  title: WASA Text
  description: |
    API for Wasa Text
  version: "1"
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
  /users/{id}:
    get:
      summary: Get conversations for a specific user
      description: Returns a list of conversation IDs associated with the specified user.
      operationId: getMyConversations
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve conversations for.
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: A list of conversation IDs.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                example: [101, 102, 103, 104]
        '401':
          description: Unauthorized - User is not authenticated.
        '404':
          description: User not found
      
  /users/{id}/name:
    put:
      summary: Update the name of a specific user
      description: Updates the user's name to the provided value.
      operationId: setMyUserName
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: "John Doe"
              minLength: 3
              maxLength: 16
      responses:
        '200':
          description: The user's name was successfully updated.
        '400':
          description: Bad Request - The input data is invalid.
        '401':
          description: Unauthorized - User is not authenticated.
        '404':
          description: User not found - The specified user does not exist.
  /users/{id}/photo:
    put:
      summary: Update the photo of a specific user
      description: Updates the user's photo with the provided .gif file.
      operationId: setMyPhoto
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: The user's new photo in .gif format.
                  example: "/path/to/photo.gif"
      responses:
        '200':
          description: The user's photo was successfully updated.
        '400':
          description: Bad Request - The uploaded photo is invalid.
        '401':
          description: Unauthorized - User is not authenticated.
        '404':
          description: User not found - The specified user does not exist.
  /conversations/{convid}:
    get:
      summary: Get a list of all message IDs in a conversation
      description: Retrieves a list of all message IDs associated with a specific conversation, only accessible to authorized users.
      operationId: getConversation
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
        - name: id
          in: query
          required: true
          description: The user ID making the request. Only users who are part of the conversation can access it.
          schema:
            type: integer
      responses:
        '200':
          description: A list of message IDs in the conversation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        '401':
          description: Unauthorized - User is not part of the conversation or invalid credentials.
        '404':
          description: Conversation not found

    post:
      summary: Send a message in a conversation
      description: Allows a user to send a message to a conversation. The response is the message ID of the new message.
      operationId: sendMessage
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The user ID sending the message.
                message:
                  type: string
                  description: The message content that the user wants to send.
              required:
                - id
                - message
      responses:
        '201':
          description: The message ID of the new message sent in the conversation
          content:
            application/json:
              schema:
                type: integer
        '401':
          description: Unauthorized - User is not part of the conversation or invalid credentials.
        '404':
          description: Conversation not found
  /conversations/{convid}/{mid}:
    put:
      summary: Forward a message to another conversation
      description: Forwards a message from one conversation to another. The user must be authorized to forward the message.
      operationId: forwardMessage
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation where the message is originally from.
          schema:
            type: integer
        - name: mid
          in: path
          required: true
          description: The message ID to forward.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The user ID who is forwarding the message.
                new_convid:
                  type: integer
                  description: The new conversation ID where the message will be forwarded.
              required:
                - id
                - new_convid
      responses:
        '200':
          description: Message successfully forwarded to the new conversation.
        '401':
          description: Unauthorized - User is not authorized to forward the message.
        '404':
          description: Message or conversation not found.
    delete:
      summary: Delete a message from a conversation
      description: Allows a user to delete a message from a conversation. The user must be authorized to delete the message.
      operationId: deleteMessage
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
        - name: mid
          in: path
          required: true
          description: The message ID to be deleted.
          schema:
            type: integer
      responses:
        '200':
          description: Message successfully deleted.
        '404':
          description: Message or conversation not found.
  /conversations/{convid}/{mid}/comment:
    put:
      summary: Add a comment to a message in a conversation
      description: Allows a user to add a comment to a specific message in a conversation.
      operationId: commentMessage
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
        - name: mid
          in: path
          required: true
          description: The message ID to which the comment will be added.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: The comment to be added to the message.
              required:
                - comment
      responses:
        '200':
          description: Comment successfully added to the message.
        '404':
          description: Message or conversation not found.
    delete:
      summary: Delete a comment from a message in a conversation
      description: Allows a user to delete a comment from a specific message in a conversation.
      operationId: uncommentMessage
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
        - name: mid
          in: path
          required: true
          description: The message ID from which the comment will be deleted.
          schema:
            type: integer
      responses:
        '200':
          description: Comment successfully deleted from the message.
        '404':
          description: Message or conversation not found.
  /conversations/{convid}/name:
    put:
      summary: Set a new name for a group
      description: Allows a user to change the name of a group.
      operationId: setGroupName
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the group.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: integer
                  description: The user ID requesting the change.
                new_name:
                  type: string
                  description: The new name for the conversation.
              required:
                - userid
                - new_name
      responses:
        '200':
          description: Group name successfully updated.
        '401':
          description: Unauthorized - User does not have permission to change the group name.
        '403':
          description: Forbidden - Not a group.
        '404':
          description: Group not found.
  /conversations/{convid}/photo:
    put:
      summary: Change the photo (GIF) of the conversation
      description: Allows a user to change the photo (GIF) of a conversation.
      operationId: setGroupPhoto
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: integer
                  description: The user ID requesting the change.
                new_photo:
                  type: string
                  format: binary
                  description: The user's new photo in .gif format.
                  example: "/path/to/photo.gif"
              required:
                - userid
                - new_photo_url
      responses:
        '200':
          description: Group photo (GIF) successfully updated.
        '401':
          description: Unauthorized 
        '403':
          description: Forbidden - not a group.
        '404':
          description: Group not found.
  /conversations/{convid}/members:
    put:
      summary: Add members to a conversation
      description: Allows a user to add multiple members (user IDs) to a conversation (group).
      operationId: addToGroup
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_ids:
                  type: array
                  items:
                    type: integer
                  description: A list of user IDs to be added to the conversation.
              required:
                - user_ids
      responses:
        '200':
          description: Members successfully added to the conversation.
        '201':
          description: New group created.
    delete:
      summary: Leave a group
      description: Allows a user to leave a group
      operationId: leaveGroup
      parameters:
        - name: convid
          in: path
          required: true
          description: The unique identifier of the conversation.
          schema:
            type: integer
        - name: user_id
          in: query
          required: true
          description: The user ID of the member to be removed from the conversation.
          schema:
            type: integer
      responses:
        '200':
          description: Member successfully removed from the conversation.
        '401':
          description: Unauthorized - Invalid credentials or session.
        '403':
          description: Forbidden - User does not have permission to remove members from the conversation.
        '404':
          description: Conversation or user not found.
          
          
          
###I do not know ho to get rid of the Resolver error l is undefined, it's on my to do list
